{"version":3,"file":"static/js/964.9b2b85c9.chunk.js","mappings":"uUAEMA,EAAU,mCACVC,EAAW,gCACJC,EAAY,kCAEZC,EAAa,mCAAG,8FACdC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oCAAiDD,IADnC,mFAAH,qDAIbK,EAAgB,mCAAG,WAAMC,GAAN,iFACjBF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,oBAC6BN,EAD7B,oBADiB,mFAAH,sDAMhBO,EAAgB,mCAAG,WAAMC,GAAN,iFACjBJ,EAAAA,EAAAA,IAAA,UACRH,EADQ,gCACwBD,EADxB,4DACmFQ,IAFlE,mFAAH,sDAMhBC,EAAS,mCAAG,WAAMH,GAAN,iFACVF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACqCN,EADrC,oBADU,mFAAH,sDAMTU,EAAY,mCAAG,WAAMJ,GAAN,iFACbF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACqCN,EADrC,oBADa,mFAAH,qD,yKC1BZW,EAAcC,EAAAA,GAAAA,GAAH,gDAIXC,EAASD,EAAAA,GAAAA,EAAH,oI,SCFNE,EAAc,SAAC,GAC1B,OAD0C,EAAdC,QACbC,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,GAAIC,EAAf,EAAeA,QAAf,OACjB,UAACR,EAAD,YACE,UAACE,EAAD,sBAAiBI,MACjB,uBAAIE,MAFYD,EADD,GAMpB,ECTYE,EAAaR,EAAAA,GAAAA,GAAH,kEAKVS,EAAUT,EAAAA,GAAAA,EAAH,4CC0CpB,EAxCgB,WACd,OAA8BU,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GAEX,IAAMI,EAAU,mCAAG,8GAEWrB,EAAAA,EAAAA,IAAakB,GAFxB,OAETI,EAFS,OAIfT,EAAWS,EAAYC,KAAKC,SAJb,gDAMfT,EAAS,KAAMU,SANA,yBAQfR,GAAW,GARI,4EAAH,qDAWhBI,GACD,GAAE,CAACH,KAGF,gCACG,IACAJ,IAAS,uBAAIA,IACbE,IAAW,SAACU,EAAA,EAAD,IACQ,IAAnBrB,EAAQsB,QACP,SAACjB,EAAD,WACE,SAACN,EAAD,CAAaC,QAASA,OAGxB,SAACM,EAAD,wDAIP,C","sources":["components/FetchData.jsx","components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","pages/Reviews/Reviews.styled.js","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '556357bfa8b76a1ca568b380d0c6c76a';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const FetchTrending = async () => {\n  return await axios.get(`${BASE_URL}trending/all/day?api_key=${API_KEY}`);\n};\n\nexport const FetchSingleMovie = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchSearchMovie = async search => {\n  return await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${search}`\n  );\n};\n\nexport const FetchCast = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchReviews = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n};\n","import styled from 'styled-components';\n\nexport const ReviewsItem = styled.li`\n  margin-bottom: 20px;\n`;\n\nexport const Author = styled.p`\n  font-size: 20px;\n  font-weight: 800;\n  margin-bottom: 10px;\n  color: #483d8b;\n  margin-bottom: 15px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { ReviewsItem, Author } from '../ReviewsList/ReviewsList.styled';\n\nexport const ReviewsList = ({ reviews }) => {\n  return reviews.map(({ author, id, content }) => (\n    <ReviewsItem key={id}>\n      <Author>Author: {author}</Author>\n      <p>{content}</p>\n    </ReviewsItem>\n  ));\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string,\n      id: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListStyled = styled.ul`\n  font-size: 20px;\n  padding-top: 15px;\n`;\n\nexport const Message = styled.p`\n  font-size: 25px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Spinner } from '../../components/Spinner';\nimport { FetchReviews } from '../../components/FetchData';\nimport { ReviewsList } from '../../components/ReviewsList/ReviewsList';\n\nimport { ListStyled, Message } from '../Reviews/Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getReviews = async () => {\n      try {\n        const reviewsData = await FetchReviews(movieId);\n\n        setReviews(reviewsData.data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {' '}\n      {error && <p>{error}</p>}\n      {loading && <Spinner />}\n      {reviews.length !== 0 ? (\n        <ListStyled>\n          <ReviewsList reviews={reviews} />\n        </ListStyled>\n      ) : (\n        <Message>We don't find any review for this movie</Message>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","IMAGE_URL","FetchTrending","axios","FetchSingleMovie","movie_id","FetchSearchMovie","search","FetchCast","FetchReviews","ReviewsItem","styled","Author","ReviewsList","reviews","map","author","id","content","ListStyled","Message","useState","setReviews","error","setError","loading","setLoading","movieId","useParams","useEffect","getReviews","reviewsData","data","results","message","Spinner","length"],"sourceRoot":""}