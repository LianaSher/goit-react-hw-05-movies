{"version":3,"file":"static/js/844.4ead5da6.chunk.js","mappings":"uUAEMA,EAAU,mCACVC,EAAW,gCACJC,EAAY,kCAEZC,EAAa,mCAAG,8FACdC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oCAAiDD,IADnC,mFAAH,qDAIbK,EAAgB,mCAAG,WAAMC,GAAN,iFACjBF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,oBAC6BN,EAD7B,oBADiB,mFAAH,sDAMhBO,EAAgB,mCAAG,WAAMC,GAAN,iFACjBJ,EAAAA,EAAAA,IAAA,UACRH,EADQ,gCACwBD,EADxB,4DACmFQ,IAFlE,mFAAH,sDAMhBC,EAAS,mCAAG,WAAMH,GAAN,iFACVF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACqCN,EADrC,oBADU,mFAAH,sDAMTU,EAAY,mCAAG,WAAMJ,GAAN,iFACbF,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACqCN,EADrC,oBADa,mFAAH,qD,sLC1BZW,EAAWC,EAAAA,GAAAA,GAAH,4KAMRC,EAAUD,EAAAA,GAAAA,IAAH,sFAMPE,EAAYF,EAAAA,GAAAA,EAAH,mIAQTG,EAAgBH,EAAAA,GAAAA,EAAH,gH,SCXbI,EAAW,SAAC,GACvB,OADyC,EAAhBC,UACRC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,aAA7B,OACnB,UAACX,EAAD,YACE,SAACE,EAAD,CACEU,IAAKD,EAAY,UAAMpB,EAAAA,IAAN,OAAkBoB,GAAlB,UAAsCE,GACvDC,IAAI,aAEN,SAACX,EAAD,UAAYK,KACZ,UAACJ,EAAD,yBAA2BK,OANdC,EADI,GAUtB,ECpBYK,EAAOd,EAAAA,GAAAA,GAAH,gGAOJe,EAAUf,EAAAA,GAAAA,EAAH,4CCqCpB,EArCa,WACX,OAAkCgB,EAAAA,EAAAA,UAAS,IAA3C,eAAOX,EAAP,KAAkBY,EAAlB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACX,IAAMI,EAAO,mCAAG,8GAEW5B,EAAAA,EAAAA,IAAUyB,GAFrB,OAENI,EAFM,OAGZT,EAAaS,EAASC,KAAKC,MAHf,gDAKZT,EAAS,KAAMU,SALH,yBAOZR,GAAW,GAPC,4EAAH,qDAUbI,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAS,uBAAIA,EAAMY,UACnBV,IAAW,SAACW,EAAA,EAAD,IACU,IAArB1B,EAAU2B,QACT,SAAClB,EAAD,WACE,SAACV,EAAD,CAAUC,UAAWA,OAGvB,SAACU,EAAD,2DAIP,C","sources":["components/FetchData.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '556357bfa8b76a1ca568b380d0c6c76a';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const FetchTrending = async () => {\n  return await axios.get(`${BASE_URL}trending/all/day?api_key=${API_KEY}`);\n};\n\nexport const FetchSingleMovie = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchSearchMovie = async search => {\n  return await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${search}`\n  );\n};\n\nexport const FetchCast = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchReviews = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastItem = styled.li`\n  width: 200px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CastImg = styled.img`\n  width: 100%;\n  min-height: 300px;\n  margin-bottom: 10px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 20px;\n  font-weight: 800;\n  margin-bottom: 10px;\n  color: #483d8b;\n  padding-left: 10px;\n`;\n\nexport const CharacterName = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 10px;\n  padding-left: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { IMAGE_URL } from '../../components/FetchData';\nimport noImage from '../../images/noImage.jpg';\n\nimport {\n  CastItem,\n  CastImg,\n  ActorName,\n  CharacterName,\n} from '../CastList/CastList.styled';\n\nexport const CastList = ({ castItems }) => {\n  return castItems.map(({ name, character, cast_id, profile_path }) => (\n    <CastItem key={cast_id}>\n      <CastImg\n        src={profile_path ? `${IMAGE_URL}${profile_path}` : `${noImage}`}\n        alt=\"profile\"\n      />\n      <ActorName>{name}</ActorName>\n      <CharacterName>Character: {character}</CharacterName>\n    </CastItem>\n  ));\n};\n\nCastList.propTypes = {\n  castItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      character: PropTypes.string,\n      cast_id: PropTypes.number,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  font-size: 20px;\n  display: flex;\n  gap: 50px;\n  flex-wrap: wrap;\n`;\n\nexport const Message = styled.p`\n  font-size: 25px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { FetchCast } from '../../components/FetchData';\nimport { Spinner } from '../../components/Spinner';\nimport { CastList } from '../../components/CastList/CastList';\n\nimport { List, Message } from '../Cast/Cast.styled';\n\nconst Cast = () => {\n  const [castItems, setCastItems] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    const getCast = async () => {\n      try {\n        const castData = await FetchCast(movieId);\n        setCastItems(castData.data.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <p>{error.massage}</p>}\n      {loading && <Spinner />}\n      {castItems.length !== 0 ? (\n        <List>\n          <CastList castItems={castItems} />\n        </List>\n      ) : (\n        <Message>We don't have any information about actors</Message>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","BASE_URL","IMAGE_URL","FetchTrending","axios","FetchSingleMovie","movie_id","FetchSearchMovie","search","FetchCast","FetchReviews","CastItem","styled","CastImg","ActorName","CharacterName","CastList","castItems","map","name","character","cast_id","profile_path","src","noImage","alt","List","Message","useState","setCastItems","error","setError","loading","setLoading","movieId","useParams","useEffect","getCast","castData","data","cast","message","massage","Spinner","length"],"sourceRoot":""}